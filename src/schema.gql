type AuthTokens {
  accessToken: String!
  refreshToken: String!
}

type ResourceEntity {
  resourceId: ID!
  name: String!
  fileId: String!
  lectureId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  lecture: LectureEntity!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type LectureEntity {
  lectureId: ID!
  title: String!
  thumbnailId: String
  lectureVideoId: String
  sectionId: String!
  processStatus: ProcessStatus!
  videoType: VideoType!
  createdAt: DateTime!
  updatedAt: DateTime!
  section: SectionEntity!
  resources: [ResourceEntity!]!
}

enum ProcessStatus {
  Pending
  Processing
  Completed
}

enum VideoType {
  MP4
  DASH
}

type SectionEntity {
  sectionId: ID!
  title: String!
  courseId: String!
  createdAt: DateTime!
  course: CourseEntity!
  lectures: [LectureEntity!]!
}

type CourseTargetEntity {
  courseTargetId: ID!
  content: String!
  position: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  courseId: String!
  course: CourseEntity!
}

type CourseEntity {
  courseId: ID!
  title: String!
  thumbnailId: String
  description: String!
  price: Float!
  verifyStatus: VerifyStatus
  isDraft: Boolean!
  creator: UserEntity!
  isDeleted: Boolean!
  previewVideoId: String
  includes: String
  courseTargets: [CourseTargetEntity!]
  sections: [SectionEntity!]!
}

enum VerifyStatus {
  Pending
  Approved
  Rejected
}

type PostContentMediaEntity {
  postContentMediaId: ID!
  position: Int!
  mediaId: String!
  postContentId: String!
  postContent: PostContentEntity!
}

type PostContentEntity {
  postContentId: ID!
  position: Int!
  text: String
  contentType: String!
  postId: String!
  post: PostEntity!
  postContentMedias: [PostContentMediaEntity!]
}

type PostReactEntity {
  postReactId: ID!
  userId: String!
  postId: String!
  liked: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: UserEntity!
  post: PostEntity!
}

type PostEntity {
  postId: ID!
  title: String!
  creatorId: String!
  courseId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  creator: UserEntity!
  postContents: [PostContentEntity!]!
  postReacts: [PostReactEntity!]!
}

type UserEntity {
  userId: ID!
  email: String!
  password: String
  avatarId: String
  coverPhotoId: String
  phoneNumber: String
  balance: Float
  role: UserRole!
  walletId: String
  firstName: String
  lastName: String
  birthdate: DateTime
  verified: Boolean!
  kind: UserKind!
  externalId: String
}

enum UserRole {
  User
  Moderator
  Administrator
}

enum UserKind {
  Local
  Google
  Facebook
}

type FindProfileByAuthTokenOutput {
  data: UserEntity!
  tokens: AuthTokens
}

type Query {
  findProfile: FindProfileByAuthTokenOutput!
  findOneCourse(input: FindOneCourseInput!): CourseEntity!
  findManyCourses(input: FindManyCoursesInput): [CourseEntity!]!
  findOnePost(input: FindOnePostInput!): PostEntity!
  findManyPosts(input: FindManyPostsInput!): [PostEntity!]!
  findOneUser(input: FindOneUserInput!): UserEntity!
}

input FindOneCourseInput {
  courseId: ID!
}

input FindManyCoursesInput {
  filter: CourseFilterInput
}

input CourseFilterInput {
  category: String
}

input FindOnePostInput {
  postId: ID!
}

input FindManyPostsInput {
  courseId: String!
  options: FindManyPostsOptions
}

input FindManyPostsOptions {
  take: Int
  skip: Int
}

input FindOneUserInput {
  userId: String!
}