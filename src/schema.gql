type AuthTokens {
  accessToken: String!
  refreshToken: String!
}

type ResourceEntity {
  resourceId: ID!
  name: String!
  fileId: String!
  lessonId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  lesson: LessonEntity!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type QuizQuestionAnswerEntity {
  quizQuestionAnswerId: ID!
  quizQuestionId: ID!
  content: String!
  isCorrect: Boolean!
  quizQuestion: [QuizQuestionEntity!]!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type QuizQuestionMediaEntity {
  quizQuestionMediaId: ID!
  position: Int!
  mediaId: ID!
  quizQuestionId: ID!
  mediaType: String!
  quiz: QuizQuestionEntity!
  createdAt: DateTime!
  updatedAt: DateTime!
}

type QuizQuestionEntity {
  quizQuestionId: ID!
  quizId: ID!
  question: String!
  questionMedias: [QuizQuestionMediaEntity!]
  answers: [QuizQuestionAnswerEntity!]!
  createdAt: DateTime!
  updatedAt: DateTime!
  quiz: QuizEntity!
}

type QuizAttemptEntity {
  quizAttemptId: ID!
  quizId: ID!
  accountId: ID!
  score: Float
  attemptStatus: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  account: AccountEntity!
  quiz: QuizEntity!
}

type QuizEntity {
  quizId: ID!
  questions: QuizQuestionEntity!
  timeLimit: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  lesson: LessonEntity!
  quizAttempts: QuizAttemptEntity!
}

type ProgressEntity {
  progressId: ID!
  lessonId: ID!
  accountId: ID!
  isCompleted: Boolean!
  account: AccountEntity!
  lesson: LessonEntity!
}

type LessonEntity {
  lessonId: ID!
  title: String!
  thumbnailId: ID
  lessonVideoId: ID
  sectionId: ID!
  processStatus: String!
  videoType: String!
  numberOfViews: Int!
  description: String
  createdAt: DateTime!
  updatedAt: DateTime!
  section: SectionEntity!
  resources: [ResourceEntity!]!
  quiz: [QuizEntity!]
  userProgresses: ProgressEntity!
}

type SectionEntity {
  sectionId: ID!
  title: String!
  courseId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  course: CourseEntity!
  lessons: [LessonEntity!]!
}

type CourseTargetEntity {
  courseTargetId: ID!
  content: String!
  position: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  courseId: ID!
  course: CourseEntity!
}

type CategoryEntity {
  categoryId: ID!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
  subcategories: [SubcategoryEntity!]!
  courses: [CourseEntity!]!
}

type CourseSubcategoryEntity {
  courseSubcategoryId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  courseId: ID!
  subcategoryId: ID!
  course: CourseEntity!
  subcategory: SubcategoryEntity!
}

type SubcategoryEntity {
  subcategoryId: ID!
  name: String
  createdAt: DateTime!
  updatedAt: DateTime!
  categoryId: ID!
  category: CategoryEntity!
  subcategoryTopics: [SubcategoryTopicEntity!]!
  courseSubcategories: [CourseSubcategoryEntity!]!
}

type SubcategoryTopicEntity {
  subcategoryTopicId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  subcategoryId: ID!
  topicId: ID!
  subcategory: SubcategoryEntity!
  topic: TopicEntity!
}

type TopicEntity {
  topicId: ID!
  name: String
  svgId: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  courseTopics: [CourseTopicEntity!]!
  subcategoryTopics: [SubcategoryTopicEntity!]!
}

type CourseTopicEntity {
  courseTopicId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  courseId: ID!
  topicId: ID!
  course: CourseEntity!
  topic: TopicEntity!
}

type CourseReviewEntity {
  courseReviewId: ID!
  courseId: ID!
  accountId: ID!
  content: String
  rating: Int!
  createdAt: DateTime!
  updatedAt: DateTime!
  course: CourseEntity!
  account: AccountEntity!
}

type CartEntity {
  cartId: ID!
  cartCourses: [CartCourseEntity!]
  isDeleted: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  account: AccountEntity!
}

type CartCourseEntity {
  cartCourseId: ID!
  cartId: ID!
  courseId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  course: CourseEntity!
  cart: CartEntity!
}

type CertificateEntity {
  certificateId: ID!
  courseId: ID!
  accountId: ID!
  createdAt: DateTime!
  achievedDate: DateTime
  expireDate: DateTime
  account: AccountEntity!
  course: CourseEntity
}

type OrderEntity {
  orderId: ID!
  accountId: ID!
  orderStatus: String!
  orderCourses: [OrderCourseEntity!]
  createdAt: DateTime!
  completeDate: DateTime
  updatedAt: DateTime!
  paymentDue: DateTime
  isDeleted: Boolean!
  account: AccountEntity!
}

type OrderCourseEntity {
  orderCourseId: ID!
  courseId: ID!
  orderId: ID!
  discountedPrice: Float!
  price: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  order: OrderEntity!
  course: CourseEntity!
}

type CourseEntity {
  courseId: ID!
  title: String
  thumbnailId: ID
  description: String
  creatorId: ID!
  price: Float!
  discountPrice: Float!
  enableDiscount: Boolean!
  verifyStatus: String!
  creator: AccountEntity!
  isDeleted: Boolean!
  receivedWalletAddress: String
  previewVideoId: ID
  includes: String
  approveStatus: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  courseTopics: [CourseTopicEntity!]!
  categoryId: ID
  category: CategoryEntity
  courseSubcategories: [CourseSubcategoryEntity!]
  courseTargets: [CourseTargetEntity!]
  posts: [PostEntity!]!
  sections: [SectionEntity!]!
  cartCourses: [CartCourseEntity!]!
  certificate: [CertificateEntity!]!
  orderCourses: [OrderCourseEntity!]!
  courseReview: CourseReviewEntity
  numberOfEnrollments: Int
  enrolled: Boolean
  courseProgress: Float
}

type PostLikeEntity {
  postLikeId: ID!
  accountId: String!
  postId: String!
  liked: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  account: AccountEntity!
  post: PostEntity!
}

type PostMediaEntity {
  postMediaId: ID!
  position: Int!
  mediaId: ID!
  postId: ID!
  mediaType: String!
  post: PostEntity!
}

type PostEntity {
  postId: ID!
  title: String!
  creatorId: ID!
  courseId: ID!
  allowComments: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  html: String!
  creator: AccountEntity!
  postMedias: [PostMediaEntity!]!
  postComments: [PostCommentEntity!]!
  postReacts: [PostLikeEntity!]!
  numberOfLikes: Int
  numberOfComments: Int
  liked: Boolean
}

type PostCommentMediaEntity {
  postCommentMediaId: ID!
  position: Int!
  mediaId: ID!
  postCommentId: String!
  mediaType: String!
  postComment: PostCommentEntity!
}

type PostCommentReplyEntity {
  postCommentReplyId: ID!
  creatorId: ID!
  postCommentId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  content: String!
  postComment: PostEntity!
  creator: AccountEntity!
}

type PostCommentEntity {
  postCommentId: ID!
  creatorId: ID!
  postId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  html: String!
  post: PostEntity!
  creator: AccountEntity!
  postCommentMedias: [PostCommentMediaEntity!]!
  numberOfLikes: Int
  numberOfReplies: Int
  liked: Boolean
}

type FollowEntity {
  followId: ID!
  followerId: String!
  followedUserId: String!
  followed: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  follower: AccountEntity!
  followedUser: AccountEntity!
}

type CryptoWalletEntity {
  cryptoWalletId: ID!
  address: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  accountId: ID!
  account: AccountEntity!
}

type AccountEntity {
  accountId: ID!
  email: String!
  password: String
  avatarId: ID
  avatarUrl: String
  coverPhotoId: ID
  phoneNumber: String
  username: String
  balance: Float
  accountRole: String!
  walletId: ID
  firstName: String
  lastName: String
  birthdate: DateTime
  verified: Boolean!
  kind: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  externalId: String
  cryptoWallets: [CryptoWalletEntity!]!
  posts: [PostEntity!]!
  courses: [CourseEntity!]!
  followerRelations: [FollowEntity!]!
  followedUserRelations: [FollowEntity!]!
  courseReview: CourseReviewEntity!
  cart: CartEntity!
  orders: OrderEntity!
  certificates: CertificateEntity!
  courseProgresses: ProgressEntity!
  quizAttempts: QuizAttemptEntity!
  followed: Boolean!
  numberOfFollowers: Int!
}

type TransactionMongoEntity {
  transactionHash: String!
  from: String!
  to: String!
  value: String!
  isValidated: Boolean
  createdAt: DateTime!
  updatedAt: DateTime!
}

type FindManyCoursesOutputMetadata {
  count: Int
  categories: [CategoryEntity!]
  subcategories: [SubcategoryEntity!]
  topics: [TopicEntity!]
}

type FindManyCoursesOutputData {
  results: [CourseEntity!]!
  metadata: FindManyCoursesOutputMetadata
}

type FindOneCourseAuthOutput {
  data: CourseEntity!
  tokens: AuthTokens
}

type FindOneLessonOutput {
  data: LessonEntity!
  tokens: AuthTokens
}

type FindManyLessonsOutput {
  data: [LessonEntity!]!
  tokens: AuthTokens
}

type FindManyResourcesOutput {
  data: [ResourceEntity!]!
  tokens: AuthTokens
}

type FindManyCourseTargetsOutput {
  data: [CourseTargetEntity!]!
  tokens: AuthTokens
}

type FindManyCourseReviewsOutputMetadata {
  count: Int
}

type FindManyCourseReviewsOutputData {
  results: [CourseReviewEntity!]!
  metadata: FindManyCourseReviewsOutputMetadata
}

type FindManyCoursesTopicOutputMetadata {
  count: Int
}

type FindManyCoursesTopicOutputData {
  results: [CourseEntity!]!
  metadata: FindManyCoursesTopicOutputMetadata
}

type FindOnePostOutput {
  data: PostEntity!
  tokens: AuthTokens
}

type FindManyPostsOutputMetadata {
  count: Int
}

type FindManyPostsOutputData {
  results: [PostEntity!]!
  metadata: FindManyPostsOutputMetadata
}

type FindManyPostsOutput {
  data: FindManyPostsOutputData!
  tokens: AuthTokens
}

type FindOnePostCommentOutputMetadata {
  count: Int
}

type FindOnePostCommentOutput {
  data: PostCommentEntity!
  tokens: AuthTokens
}

type FindManyPostCommentsOutputData {
  results: [PostCommentEntity!]!
  metadata: FindOnePostCommentOutputMetadata
}

type FindManyPostCommentsOutput {
  data: FindManyPostCommentsOutputData!
  tokens: AuthTokens
}

type FindManyPostCommentRepliesOutputData {
  results: [PostCommentReplyEntity!]!
  metadata: FindOnePostCommentOutputMetadata
}

type FindManyPostCommentRepliesOutput {
  data: FindManyPostCommentRepliesOutputData!
  tokens: AuthTokens
}

type FindManyUsersOutputMetadata {
  count: Int
}

type FindManyUsersOutputData {
  results: [AccountEntity!]!
  metadata: FindManyUsersOutputMetadata
}

type FindManyUsersOutput {
  data: FindManyUsersOutputData!
  tokens: AuthTokens
}

type FindManySelfCreatedCoursesOutputMetadata {
  count: Int
}

type FindManySelfCreatedCoursesOutputData {
  results: [CourseEntity!]!
  metadata: FindManySelfCreatedCoursesOutputMetadata
}

type FindManySelfCreatedCoursesOutput {
  data: FindManySelfCreatedCoursesOutputData!
  tokens: AuthTokens
}

type FindManyEnrolledCoursesOutputMetadata {
  count: Int
}

type FindManyEnrolledCoursesOutputData {
  results: [CourseEntity!]!
  metadata: FindManyEnrolledCoursesOutputMetadata
}

type FindManyEnrolledCoursesOutput {
  data: FindManyEnrolledCoursesOutputData!
  tokens: AuthTokens
}

type InitOutput {
  data: AccountEntity!
  tokens: AuthTokens
}

type SignInOutput {
  data: AccountEntity!
  tokens: AuthTokens
}

type VerifyGoogleAccessTokenOutput {
  data: AccountEntity!
  tokens: AuthTokens
}

type FindManyTransactionsOutputMetadata {
  count: Int
}

type FindManyTransactionsOutput {
  results: [TransactionMongoEntity!]!
  metadata: FindManyTransactionsOutputMetadata
}

type FindOneCartOutput {
  data: CartEntity!
  tokens: AuthTokens
}

type FindOneOrderOutput {
  data: OrderEntity!
  tokens: AuthTokens
}

type FindManyUserOrdersOutputMetadata {
  count: Int
}

type FindManyUserOrdersOutputData {
  results: [OrderEntity!]!
  metadata: FindManyUserOrdersOutputMetadata
}

type FindManyUserOrdersOutput {
  data: FindManyUserOrdersOutputData!
  tokens: AuthTokens
}

type Query {
  init: InitOutput!
  signIn(data: SignInInputData!): SignInOutput!
  verifyGoogleAccessToken(data: VerifyGoogleAccessTokenData!): VerifyGoogleAccessTokenOutput!
  findOneCourse(data: FindOneCourseInputData!): CourseEntity!
  findOneCourseAuth(data: FindOneCourseAuthInputData!): FindOneCourseAuthOutput!
  findManyCourses(data: FindManyCoursesInputData!): FindManyCoursesOutputData!
  findOneLesson(data: FindOneLessonInputData!): FindOneLessonOutput!
  findManyLessons(data: FindManyLessonsInputData!): FindManyLessonsOutput!
  findManyResources(data: FindManyResourcesInputData!): FindManyResourcesOutput!
  findManyCourseTargets(data: FindManyCourseTargetsInputData!): FindManyCourseTargetsOutput!
  findManyCategories: [CategoryEntity!]!
  findOneCourseReview(data: FindOneCourseReviewInputData!): CourseReviewEntity!
  findManyCourseReviews(data: FindManyCourseReviewsInputData!): FindManyCourseReviewsOutputData!
  findManyCoursesTopic(data: FindManyCoursesTopicInputData!): FindManyCoursesTopicOutputData!
  findOnePost(data: FindOnePostInputData!): FindOnePostOutput!
  findManyPosts(data: FindManyPostsInputData!): FindManyPostsOutput!
  findOnePostComment(data: FindOnePostCommentInputData!): FindOnePostCommentOutput!
  findManyPostComments(data: FindManyPostCommentsInputData!): FindManyPostCommentsOutput!
  findManyPostCommentReplies(data: FindManyPostCommentRepliesInputData!): FindManyPostCommentRepliesOutput!
  findOneUser(data: FindOneUserInputData!): AccountEntity!
  findManyFollowers(data: FindManyFollowersInputData!): [AccountEntity!]!
  findManyCreatedCourses(data: FindManyCreatedCoursesInputData!): [CourseEntity!]!
  findManyUsers(data: FindManyUsersInputData!): FindManyUsersOutput!
  findManySelfCreatedCourses(data: FindManySelfCreatedCoursesInputData!): FindManySelfCreatedCoursesOutput!
  findManyEnrolledCourses(data: FindManyEnrolledCoursesInputData!): FindManyEnrolledCoursesOutput!
  findManyTransactions(data: FindManyTransactionsInputData!): FindManyTransactionsOutput!
  findOneCart: FindOneCartOutput!
  findOneOrder(data: FindOneOrderInputData!): FindOneOrderOutput!
  findManyUserOrders(data: FindManyUserOrdersInputData!): FindManyUserOrdersOutput!
}

input SignInInputData {
  params: SignInInputParams!
}

input SignInInputParams {
  email: String!
  password: String!
}

input VerifyGoogleAccessTokenData {
  params: VerifyGoogleAccessTokenParams!
}

input VerifyGoogleAccessTokenParams {
  token: ID!
}

input FindOneCourseInputData {
  params: FindOneCourseInputParams!
}

input FindOneCourseInputParams {
  courseId: ID!
  accountId: ID
}

input FindOneCourseAuthInputData {
  params: FindOneCourseAuthInputParams!
}

input FindOneCourseAuthInputParams {
  courseId: ID!
}

input FindManyCoursesInputData {
  options: FindManyCoursesInputOptions
}

input FindManyCoursesInputOptions {
  take: Int
  skip: Int
  searchValue: String
}

input FindOneLessonInputData {
  params: FindOneLessonInputParams!
  options: FindOneLessonInputOptions
}

input FindOneLessonInputParams {
  lessonId: ID!
}

input FindOneLessonInputOptions {
  followerId: ID
}

input FindManyLessonsInputData {
  params: FindManyLessonsInputParams!
}

input FindManyLessonsInputParams {
  sectionId: ID!
}

input FindManyResourcesInputData {
  params: FindManyResourcesInputParams!
}

input FindManyResourcesInputParams {
  lessonId: ID!
}

input FindManyCourseTargetsInputData {
  params: FindManyCourseTargetsInputParams!
}

input FindManyCourseTargetsInputParams {
  courseId: ID!
}

input FindOneCourseReviewInputData {
  params: FindOneCourseReviewInputParams!
}

input FindOneCourseReviewInputParams {
  courseId: ID!
}

input FindManyCourseReviewsInputData {
  params: FindManyCourseReviewsInputParams!
  options: FindManyCourseReviewsInputOptions
}

input FindManyCourseReviewsInputParams {
  courseId: ID!
}

input FindManyCourseReviewsInputOptions {
  take: Int
  skip: Int
}

input FindManyCoursesTopicInputData {
  params: FindManyCoursesTopicInputParams!
  options: FindManyCoursesTopicInputOptions
}

input FindManyCoursesTopicInputParams {
  topicId: ID!
}

input FindManyCoursesTopicInputOptions {
  take: Int
  skip: Int
}

input FindOnePostInputData {
  params: FindOnePostInputParams!
}

input FindOnePostInputParams {
  postId: ID!
}

input FindManyPostsInputData {
  params: FindManyPostsInputParams!
  options: FindManyPostsInputOptions
}

input FindManyPostsInputParams {
  courseId: String!
}

input FindManyPostsInputOptions {
  take: Int
  skip: Int
}

input FindOnePostCommentInputData {
  params: FindOnePostCommentInputParams!
}

input FindOnePostCommentInputParams {
  postCommentId: ID!
}

input FindManyPostCommentsInputData {
  params: FindManyPostCommentsInputParams!
  options: FindManyPostCommentsInputOptions
}

input FindManyPostCommentsInputParams {
  postId: String!
}

input FindManyPostCommentsInputOptions {
  take: Int
  skip: Int
}

input FindManyPostCommentRepliesInputData {
  params: FindManyPostCommentRepliesInputParams!
  options: FindManyPostsCommentRepliesInputOptions
}

input FindManyPostCommentRepliesInputParams {
  postCommentId: String!
}

input FindManyPostsCommentRepliesInputOptions {
  take: Int
  skip: Int
}

input FindOneUserInputData {
  params: FindOneUserInputParams!
  options: FindOneUserInputOptions
}

input FindOneUserInputParams {
  accountId: ID!
}

input FindOneUserInputOptions {
  followerId: ID
}

input FindManyFollowersInputData {
  params: FindManyFollowersInputParams!
}

input FindManyFollowersInputParams {
  accountId: ID!
}

input FindManyCreatedCoursesInputData {
  params: FindManyCreatedCoursesInputParams!
  options: FindManyCreatedCoursesInputOptions
}

input FindManyCreatedCoursesInputParams {
  accountId: String!
}

input FindManyCreatedCoursesInputOptions {
  take: Int
  skip: Int
}

input FindManyUsersInputData {
  options: FindManyUsersInputOptions
}

input FindManyUsersInputOptions {
  take: Int
  skip: Int
  searchValue: String
}

input FindManySelfCreatedCoursesInputData {
  options: FindManySelfCreatedCoursesInputOptions
}

input FindManySelfCreatedCoursesInputOptions {
  take: Int
  skip: Int
}

input FindManyEnrolledCoursesInputData {
  options: FindManyEnrolledCoursesInputOptions
}

input FindManyEnrolledCoursesInputOptions {
  take: Int
  skip: Int
}

input FindManyTransactionsInputData {
  options: FindManyTransactionsInputOptions
}

input FindManyTransactionsInputOptions {
  take: Int
  skip: Int
}

input FindOneOrderInputData {
  params: FindOneOrderInputParams!
}

input FindOneOrderInputParams {
  orderId: ID!
}

input FindManyUserOrdersInputData {
  options: FindManyUserOrdersInputOptions
}

input FindManyUserOrdersInputOptions {
  take: Int
  skip: Int
  orderStatus: String!
}