type AuthTokens {
  accessToken: String!
  refreshToken: String!
}

type ResourceEntity {
  resourceId: ID!
  name: String!
  fileId: String!
  lectureId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  lecture: LectureEntity!
}

"""
A date-time string at UTC, such as 2019-12-03T09:54:33Z, compliant with the date-time format.
"""
scalar DateTime

type LectureEntity {
  lectureId: ID!
  title: String!
  thumbnailId: ID
  lectureVideoId: ID
  sectionId: ID!
  processStatus: String!
  videoType: String!
  createdAt: DateTime!
  updatedAt: DateTime!
  section: SectionEntity!
  resources: [ResourceEntity!]!
}

type SectionEntity {
  sectionId: ID!
  title: String!
  courseId: ID!
  createdAt: DateTime!
  course: CourseEntity!
  lectures: [LectureEntity!]!
}

type CourseTargetEntity {
  courseTargetId: ID!
  content: String!
  position: Float!
  createdAt: DateTime!
  updatedAt: DateTime!
  courseId: ID!
  course: CourseEntity!
}

type CourseEntity {
  courseId: ID!
  title: String
  thumbnailId: ID
  description: String
  creatorId: ID!
  price: Float!
  verifyStatus: VerifyStatus
  isDraft: Boolean!
  creator: UserEntity!
  isDeleted: Boolean!
  previewVideoId: ID
  includes: String
  createdAt: DateTime!
  updatedAt: DateTime!
  courseTargets: [CourseTargetEntity!]
  sections: [SectionEntity!]!
}

enum VerifyStatus {
  Pending
  Approved
  Rejected
}

type PostLikeEntity {
  postLikeId: ID!
  userId: String!
  postId: String!
  liked: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  user: UserEntity!
  post: PostEntity!
}

type PostMediaEntity {
  postMediaId: ID!
  position: Int!
  mediaId: ID!
  postId: ID!
  mediaType: String!
  post: PostEntity!
}

type PostEntity {
  postId: ID!
  title: String!
  creatorId: ID!
  courseId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  html: String!
  creator: UserEntity!
  postMedias: [PostMediaEntity!]!
  postComments: [PostCommentEntity!]!
  postReacts: [PostLikeEntity!]!
  numberOfLikes: Int
  numberOfComments: Int
  liked: Boolean
}

type PostCommentMediaEntity {
  postCommentMediaId: ID!
  position: Int!
  mediaId: ID!
  postCommentId: String!
  mediaType: String!
  postComment: PostCommentEntity!
}

type PostCommentEntity {
  postCommentId: ID!
  creatorId: ID!
  postId: ID!
  createdAt: DateTime!
  updatedAt: DateTime!
  html: String!
  post: PostEntity!
  creator: UserEntity!
  postCommentMedias: [PostCommentMediaEntity!]!
  numberOfLikes: Int
  liked: Boolean
}

type FollowEntity {
  followId: ID!
  followerId: String!
  followedUserId: String!
  followed: Boolean!
  createdAt: DateTime!
  updatedAt: DateTime!
  follower: UserEntity!
  followedUser: UserEntity!
}

type UserEntity {
  userId: ID!
  email: String!
  password: String
  avatarId: ID
  coverPhotoId: ID
  phoneNumber: String
  username: String
  balance: Float
  role: UserRole!
  walletId: ID
  firstName: String
  lastName: String
  birthdate: DateTime
  verified: Boolean!
  kind: UserKind!
  externalId: String
  posts: [PostEntity!]!
  courses: [CourseEntity!]!
  followerRelations: [FollowEntity!]!
  followedUserRelations: [FollowEntity!]!
  followed: Boolean!
  numberOfFollowers: Int!
}

enum UserRole {
  User
  Moderator
  Administrator
}

enum UserKind {
  Local
  Google
  Facebook
}

type FindOneLectureOutput {
  data: LectureEntity!
  tokens: AuthTokens
}

type FindManyResourcesOutput {
  data: [ResourceEntity!]!
  tokens: AuthTokens
}

type FindManyCourseTargetsOutput {
  data: [CourseTargetEntity!]!
  tokens: AuthTokens
}

type FindOnePostOutput {
  data: PostEntity!
  tokens: AuthTokens
}

type FindManyPostsOutput {
  data: [PostEntity!]!
  tokens: AuthTokens
}

type FindOnePostCommentOutput {
  data: PostCommentEntity!
  tokens: AuthTokens
}

type FindManyPostCommentsOutput {
  data: [PostCommentEntity!]!
  tokens: AuthTokens
}

type FindManyPostsMetadataOutputData {
  numberOfPosts: Int!
}

type FindManyPostsMetadataOutput {
  data: FindManyPostsMetadataOutputData!
  tokens: AuthTokens
}

type FindManyPostCommentsMetadataOutputData {
  numberOfPostComments: Int!
}

type FindManyPostCommentsMetadataOutput {
  data: FindManyPostCommentsMetadataOutputData!
  tokens: AuthTokens
}

type InitOutput {
  data: UserEntity!
  tokens: AuthTokens
}

type SignInOutput {
  data: UserEntity!
  tokens: AuthTokens
}

type Query {
  init: InitOutput!
  signIn(data: SignInInputData!): SignInOutput!
  findOneCourse(data: FindOneCourseInputData!): CourseEntity!
  findManyCourses(data: FindManyCoursesInputData): [CourseEntity!]!
  findOneLecture(data: FindOneLectureInputData!): FindOneLectureOutput!
  findManyLectures(data: FindManyLecturesInputData!): [LectureEntity!]!
  findManyResources(data: FindManyResourcesInputData!): FindManyResourcesOutput!
  findManyCourseTargets(data: FindManyCourseTargetsInputData!): FindManyCourseTargetsOutput!
  findOnePost(data: FindOnePostInputData!): FindOnePostOutput!
  findManyPosts(data: FindManyPostsInputData!): FindManyPostsOutput!
  findOnePostComment(data: FindOnePostCommentInputData!): FindOnePostCommentOutput!
  findManyPostsMetadata: FindManyPostsMetadataOutput!
  findManyPostComments(data: FindManyPostCommentsInputData!): FindManyPostCommentsOutput!
  findManyPostCommentsMetadata(data: FindManyPostCommentsMetadataInputData!): FindManyPostCommentsMetadataOutput!
  findOneUser(data: FindOneUserInputData!): UserEntity!
  findManyFollowers(data: FindManyFollowersInputData!): [UserEntity!]!
  findManyCreatedCourses(data: FindManyCreatedCoursesInputData!): [CourseEntity!]!
  findManySelfCreatedCourses(data: FindManySelfCreatedCoursesInputData!): [CourseEntity!]!
}

input SignInInputData {
  email: String!
  password: String!
}

input FindOneCourseInputData {
  courseId: ID!
}

input FindManyCoursesInputData {
  filter: CourseFilterInput
}

input CourseFilterInput {
  category: String
}

input FindOneLectureInputData {
  lectureId: ID!
}

input FindManyLecturesInputData {
  sectionId: ID!
}

input FindManyResourcesInputData {
  lectureId: ID!
}

input FindManyCourseTargetsInputData {
  courseId: ID!
}

input FindOnePostInputData {
  postId: ID!
}

input FindManyPostsInputData {
  courseId: String!
  options: FindManyPostsInputOptions
}

input FindManyPostsInputOptions {
  take: Int
  skip: Int
}

input FindOnePostCommentInputData {
  postCommentId: ID!
}

input FindManyPostCommentsInputData {
  postId: ID!
  options: FindManyPostsCommentInputOptions
}

input FindManyPostsCommentInputOptions {
  take: Int
  skip: Int
}

input FindManyPostCommentsMetadataInputData {
  postId: ID!
}

input FindOneUserInputData {
  userId: String!
  options: FindOneUserInputOptions
}

input FindOneUserInputOptions {
  followerId: String!
}

input FindManyFollowersInputData {
  userId: String!
}

input FindManyCreatedCoursesInputData {
  userId: String!
  options: FindManyCreatedCoursesInputOptions
}

input FindManyCreatedCoursesInputOptions {
  take: Int
  skip: Int
}

input FindManySelfCreatedCoursesInputData {
  options: FindManySelfCreatedCoursesInputOptions
}

input FindManySelfCreatedCoursesInputOptions {
  take: Int
  skip: Int
}